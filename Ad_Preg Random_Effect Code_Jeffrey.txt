rm(list=ls())
library(invgamma)
library(MCMCpack)
library(AR)
library(MASS)
library(gamlss.dist)
library(ramify)
library(glogis)
library(HDInterval)
library(coda)



############# Data #######################

data=read.csv("E:\\RA\\Adolescent Pregnancy\\Adolescent Pregnancy Data.csv")

x_111_array=data[,3]
x_110_array=data[,4]
x_101_array=data[,5]
x_011_array=data[,6]
x_100_array=data[,7]    
x_010_array=data[,8] 
x_001_array=data[,9] 


tot=500000    # No. of iteration in Gibbs Sampling




######## Initial Value ##############################


alpha1=0.2
alpha2=0.2
alpha3=0.2 

d1=0.5
d2=0.5
d3=0.5
d4=0.5

delta=array(NA,c(3,tot))

b1=array(NA,dim = c(nrow(data),tot))
b2=array(NA,dim = c(nrow(data),tot))
b3=array(NA,dim = c(nrow(data),tot))

p1=array(NA,dim = c(nrow(data),tot))
p2=array(NA,dim = c(nrow(data),tot))
p3=array(NA,dim = c(nrow(data),tot))

delta_1=0.8
delta_2=1
delta_3=1.5

lambda=array(0,3)
lambda[1]=delta_1/100
lambda[2]=delta_2/100
lambda[3]=delta_3/100

gamma=array(0,3) 
gamma[1]=delta_1*lambda[1]   # To maintain the prior mean as delta_1
gamma[2]=delta_2*lambda[2]
gamma[3]=delta_3*lambda[3]

a_phi=1 # Hyper parameter for phi
b_phi=1

TP=data[,12]  # Female population size (15-19 years)


beta=array(0.5,4) # Jeffrey's Dirichlet prior




alpha_1=array(NA,tot)
alpha_2=array(NA,tot)
alpha_3=array(NA,tot)
alpha=array(NA,tot)


y110_1=array(NA,c(nrow(data),tot))
y110_2=array(NA,c(nrow(data),tot))
y110_3=array(NA,c(nrow(data),tot))

y011_1=array(NA,c(nrow(data),tot))
y011_2=array(NA,c(nrow(data),tot))
y011_3=array(NA,c(nrow(data),tot))

y100_1=array(NA,c(nrow(data),tot))
y100_2=array(NA,c(nrow(data),tot))
y100_3=array(NA,c(nrow(data),tot))

y101_1=array(NA,c(nrow(data),tot))
y101_2=array(NA,c(nrow(data),tot))
y101_3=array(NA,c(nrow(data),tot))

y010_1=array(NA,c(nrow(data),tot))
y010_2=array(NA,c(nrow(data),tot))
y010_3=array(NA,c(nrow(data),tot))

y001_1=array(NA,c(nrow(data),tot))
y001_2=array(NA,c(nrow(data),tot))
y001_3=array(NA,c(nrow(data),tot))



p_111=array(NA,c(nrow(data),tot))
p_110=array(NA,c(nrow(data),tot))
p_100=array(NA,c(nrow(data),tot))
p_001=array(NA,c(nrow(data),tot))
p_010=array(NA,c(nrow(data),tot))
p_101=array(NA,c(nrow(data),tot))
p_011=array(NA,c(nrow(data),tot))
p_000=array(NA,c(nrow(data),tot))

m=array(NA,c(nrow(data),3))
n=array(NA,c(nrow(data),3))

N_estimate=array(NA,c(nrow(data),tot))

phi=array(NA,c(nrow(data),tot))

Medi=array(NA,dim = nrow(data))
MD_Medi=array(NA,dim = nrow(data))
CI_hpd_N_length=array(NA,dim = nrow(data))
CI_hpd_N_1=array(NA,dim = nrow(data))
CI_hpd_N_2=array(NA,dim = nrow(data))

######################################


alpha_1[1]=alpha1
alpha_2[1]=alpha2
alpha_3[1]=alpha3  

alpha[1]=min((alpha_1[1]+alpha_2[1]+alpha_3[1]),1)

delta[1,1]=delta_1
delta[2,1]=delta_2
delta[3,1]=delta_3

for(a in 1:nrow(data)){
  for(t in 1:3){
    if(t==1){
      b1[a,1]=rglogis(1, location = 0, scale = 1, shape = delta[t,1])
      p1[a,1]=(1+exp(-b1[a,1]))^(-1)}
    else if(t==2){
      b2[a,1]=rglogis(1, location = 0, scale = 1, shape = delta[t,1])
      p2[a,1]=(1+exp(-b2[a,1]))^(-1)}
    else {
      b3[a,1]=rglogis(1, location = 0, scale = 1, shape = delta[t,1])
      p3[a,1]=(1+exp(-b3[a,1]))^(-1)}
  }
}

# For loop starts for Gibbs sampling

for(h in 2:tot){
  
  alpha_vec_draw=rdirichlet(1,c(d1,d2,d3,d4))
  
  alpha_1[h]=alpha_vec_draw[1,1]
  alpha_2[h]=alpha_vec_draw[1,2]
  alpha_3[h]=alpha_vec_draw[1,3]  
  alpha[h]=min((alpha_1[h]+alpha_2[h]+alpha_3[h]),1)
  
  d=array(NA,3)
  for(t in 1:3){
    if(t == 1){
      d[t] = sum(log(1 + exp(-(b1[, h-1]))))
      delta[t, h] = rgamma(1, rate = d[t], shape = nrow(data))
      #delta[t, h] = rgamma(1, rate = lambda[t] + d[t], shape = nrow(data) + gamma[t]) # Prior II
    } else if(t == 2){
      d[t] = sum(log(1 + exp(-(b2[, h-1]))))
      delta[t, h] = rgamma(1, rate = d[t], shape = nrow(data))
      #delta[t, h] = rgamma(1, rate = lambda[t] + d[t], shape = nrow(data) + gamma[t]) # Prior II
    } else {
      d[t] = sum(log(1 + exp(-(b3[, h-1]))))
      delta[t, h] = rgamma(1, rate = d[t], shape = nrow(data))
      #delta[t, h] = rgamma(1, rate = lambda[t] + d[t], shape = nrow(data) + gamma[t]) # Prior II
    }
  } # End of the t loop
  
  
  for(i in 1:nrow(data)){
    
    x_111=data[i,3]
    x_110=data[i,4]
    x_101=data[i,5]
    x_011=data[i,6]
    x_100=data[i,7]    
    x_010=data[i,8] 
    x_001=data[i,9] 
    
    NN=x_111+x_110+x_101+x_011+x_100+x_010+x_001     # Sum of seven observed cell
    
    x=array(0,3)
    
    x[1]=x_111+x_110+x_101+x_100
    x[2]=x_111+x_110+x_011+x_010
    x[3]=x_111+x_101+x_011+x_001
    
    
    N_estimate[i,1]=rnbinom(1,NN,p1[1,1])+NN
    
    
    
    p_111[i,h]=((1-alpha[h])*p1[i,h-1]*p2[i,h-1]*p3[i,h-1])
    
    p_110[i,h]=((1-alpha[h])*p1[i,h-1]*p2[i,h-1]*(1-p3[i,h-1]))+(alpha_2[h]*p1[i,h-1]*p2[i,h-1])+(alpha_3[h]*p1[i,h-1]*p2[i,h-1])
    Q_110_1=((1-alpha[h])*p1[i,h-1]*p2[i,h-1]*(1-p3[i,h-1]))/p_110[i,h]
    Q_110_2=alpha_2[h]*p1[i,h-1]*p2[i,h-1]/p_110[i,h]
    Q_110_3=max(1-Q_110_1-Q_110_2,0)
    prob_y110=c(Q_110_1,Q_110_2,Q_110_3)
    y110_vec_draw=rmultinom(1,x_110,prob_y110)
    
    y110_1[i,h]=y110_vec_draw[1,1]
    y110_2[i,h]=y110_vec_draw[2,1]           
    y110_3[i,h]=x_110-y110_1[i,h]-y110_2[i,h]
    
    
    p_011[i,h]=((1-alpha[h])*(1-p1[i,h-1])*p2[i,h-1]*p3[i,h-1])+(alpha_1[h]*(1-p1[i,h-1])*p3[i,h-1])+(alpha_3[h]*(1-p1[i,h-1])*p2[i,h-1])
    Q_011_1=((1-alpha[h])*(1-p1[i,h-1])*p2[i,h-1]*p3[i,h-1])/p_011[i,h]
    Q_011_2=(alpha_1[h]*(1-p1[i,h-1])*p3[i,h-1])/p_011[i,h]
    Q_011_3=max(1-Q_011_1-Q_011_2,0)
    prob_y011=c(Q_011_1,Q_011_2,Q_011_3)
    y011_vec_draw=rmultinom(1,x_011,prob_y011)
    
    y011_1[i,h]=y011_vec_draw[1,1]
    y011_2[i,h]=y011_vec_draw[2,1]
    y011_3[i,h]=x_011-y011_1[i,h]-y011_2[i,h]
    
    
    p_100[i,h]=((1-alpha[h])*p1[i,h-1]*(1-p2[i,h-1])*(1-p3[i,h-1]))+(alpha_1[h]*p1[i,h-1]*(1-p3[i,h-1]))+(alpha_3[h]*p1[i,h-1]*(1-p2[i,h-1]))
    Q_100_1=((1-alpha[h])*p1[i,h-1]*(1-p2[i,h-1])*(1-p3[i,h-1]))/p_100[i,h]
    Q_100_2=(alpha_1[h]*p1[i,h-1]*(1-p3[i,h-1]))/p_100[i,h]
    Q_100_3=max(1-Q_100_1-Q_100_2,0)
    prob_y100=c(Q_100_1,Q_100_2,Q_100_3)
    y100_vec_draw=rmultinom(1,x_100,prob_y100)
    
    y100_1[i,h]=y100_vec_draw[1,1]
    y100_2[i,h]=y100_vec_draw[2,1]
    y100_3[i,h]=x_100-y100_1[i,h]-y100_2[i,h]
    
    
    
    p_101[i,h]=((1-alpha[h])*p1[i,h-1]*(1-p2[i,h-1])*p3[i,h-1])+(alpha_1[h]*p1[i,h-1]*p3[i,h-1])+(alpha_2[h]*p1[i,h-1]*(1-p2[i,h-1]))
    Q_101_1=(1-alpha[h])*p1[i,h-1]*(1-p2[i,h-1])*p3[i,h-1]/p_101[i,h]
    Q_101_2=(alpha_1[h]*p1[i,h-1]*p3[i,h-1])/p_101[i,h]
    Q_101_3=max(1-Q_101_1-Q_101_2,0)
    prob_y101=c(Q_101_1,Q_101_2,Q_101_3)
    y101_vec_draw=rmultinom(1,x_101,prob_y101)
    
    y101_1[i,h]=y101_vec_draw[1,1]
    y101_2[i,h]=y101_vec_draw[2,1]
    y101_3[i,h]=x_101-y101_1[i,h]-y101_2[i,h]
    
    
    p_010[i,h]=((1-alpha[h])*(1-p1[i,h-1])*p2[i,h-1]*(1-p3[i,h-1]))+(alpha_1[h]*(1-p1[i,h-1])*(1-p3[i,h-1]))+(alpha_2[h]*(1-p1[i,h-1])*p2[i,h-1])  
    Q_010_1=((1-alpha[h])*(1-p1[i,h-1])*p2[i,h-1]*(1-p3[i,h-1]))/p_010[i,h]
    Q_010_2=(alpha_1[h]*(1-p1[i,h-1])*(1-p3[i,h-1]))/p_010[i,h]
    Q_010_3=max(1-Q_010_1-Q_010_2,0)
    prob_y010=c(Q_010_1,Q_010_2,Q_010_3)
    y010_vec_draw=rmultinom(1,x_010,prob_y010)
    
    y010_1[i,h]=y010_vec_draw[1,1]
    y010_2[i,h]=y010_vec_draw[2,1]
    y010_3[i,h]=x_010-y010_1[i,h]-y010_2[i,h]
    
    
    
    p_001[i,h]=((1-alpha[h])*(1-p1[i,h-1])*(1-p2[i,h-1])*p3[i,h-1])+(alpha_2[h]*(1-p1[i,h-1])*(1-p2[i,h-1]))+(alpha_3[h]*(1-p1[i,h-1])*(1-p2[i,h-1]))
    Q_001_1=((1-alpha[h])*(1-p1[i,h-1])*(1-p2[i,h-1])*p3[i,h-1])/p_001[i,h]
    Q_001_2=(alpha_2[h]*(1-p1[i,h-1])*(1-p2[i,h-1]))/p_001[i,h]
    Q_001_3=max(1-Q_001_1-Q_001_2,0)
    prob_y001=c(Q_001_1,Q_001_2,Q_001_3)
    y001_vec_draw=rmultinom(1,x_001,prob_y001)
    
    y001_1[i,h]=y001_vec_draw[1,1]
    y001_2[i,h]=y001_vec_draw[2,1]
    y001_3[i,h]=x_001-y001_1[i,h]-y001_2[i,h]
    
    
    
    
    
    m[i,1]=x[1]
    n[i,1]=(N_estimate[i,h-1]-x[1])
    
    m[i,2]=x_111+x_110+x_011-y011_2[i,h]+x_010-y010_2[i,h]
    n[i,2]=N_estimate[i,h-1]-NN+x_001+x_100-y100_2[i,h]+x_101-y101_2[i,h]
    
    m[i,3]=x_111+y011_1[i,h]+y011_2[i,h]+y101_1[i,h]+y101_2[i,h]+y001_1[i,h]
    n[i,3]=N_estimate[i,h-1]-NN+y110_1[i,h]+y100_1[i,h]+y100_2[i,h]+y010_1[i,h]+y010_2[i,h]
    
    b1[i,h]=log(rgamma(1,(m[i,1]+delta[1,h]),1))-log(rgamma(1,(n[i,1]+1),1))
    b2[i,h]=log(rgamma(1,(m[i,2]+delta[2,h]),1))-log(rgamma(1,(n[i,2]+1),1))
    b3[i,h]=log(rgamma(1,(m[i,3]+delta[3,h]),1))-log(rgamma(1,(n[i,3]+1),1))
    
    p1[i,h]=min((1+exp(-(b1[i,h])))^(-1),0.9999999)
    p2[i,h]=min((1+exp(-(b2[i,h])))^(-1),0.9999999)
    p3[i,h]=min((1+exp(-(b3[i,h])))^(-1),0.9999999)
    
    #Prior I
    w=rnbinom(1,NN,1-((1-alpha[h])*(1-p1[i,h])*(1-p2[i,h])*(1-p3[i,h])))
    N_estimate[i,h]=w+NN
    
    #Prior II
    #phi[i,h]=rbeta(1,N_estimate[i,h-1]+a_phi,TP[i]+b_phi-N_estimate[i,h-1])  
    #p_000[i,h]=(1-alpha[h])*(1-p1[i,h])*(1-p2[i,h])*(1-p3[i,h])
    
    #w=rbinom(1,TP[i]-NN,((phi[i,h]*p_000[i,h])/(1-phi[i,h]+(phi[i,h]*p_000[i,h]))))
    
    #N_estimate[i,h]=w+NN
    
  } # End of i loop
  
  
  y110_1_sum=sum(y110_1[,h])
  y110_2_sum=sum(y110_2[,h])
  y110_3_sum=sum(y110_3[,h])
  
  y011_1_sum=sum(y011_1[,h])
  y011_2_sum=sum(y011_2[,h])
  y011_3_sum=sum(y011_3[,h])
  
  y100_1_sum=sum(y100_1[,h])
  y100_2_sum=sum(y100_2[,h])
  y100_3_sum=sum(y100_3[,h])
  
  y101_1_sum=sum(y101_1[,h])
  y101_2_sum=sum(y101_2[,h])
  y101_3_sum=sum(y101_3[,h])
  
  y010_1_sum=sum(y010_1[,h])
  y010_2_sum=sum(y010_2[,h])
  y010_3_sum=sum(y010_3[,h])
  
  y001_1_sum=sum(y001_1[,h])
  y001_2_sum=sum(y001_2[,h])
  y001_3_sum=sum(y001_3[,h])
  
  
  x_111_sum=sum(x_111_array)
  x_110_sum=sum(x_110_array)
  x_011_sum=sum(x_011_array)
  x_100_sum=sum(x_100_array)
  x_101_sum=sum(x_101_array)
  x_010_sum=sum(x_010_array)
  x_001_sum=sum(x_001_array)
  
  NN_sum=x_111_sum+x_110_sum+x_011_sum+x_100_sum+x_101_sum+x_010_sum+x_001_sum
  
  N_estimate_sum=sum(N_estimate[,h])
  
  d1=y011_2_sum+y100_2_sum+y101_2_sum+y010_2_sum+beta[1]
  d2=y110_2_sum+x_101_sum-y101_1_sum-y101_2_sum+x_010_sum-y010_1_sum-y010_2_sum+y001_2_sum+beta[2]
  d3=x_110_sum-y110_1_sum-y110_2_sum+x_011_sum-y011_1_sum-y011_2_sum+x_100_sum-y100_1_sum-y100_2_sum+x_001_sum-y001_1_sum-y001_2_sum+beta[3]
  d4=x_111_sum+(y110_1_sum+y011_1_sum+y100_1_sum+y101_1_sum+y010_1_sum+y001_1_sum)+(N_estimate_sum-NN_sum)+beta[4]
  
  
} # End of h loop


###################  Plots & Diagnostics #######################

th=10
lw=tot*0.5
up=tot


#########  Trace plots ##############
t=seq(lw,up, th)
years=c("2008","2009","2010","2011","2012","2013")

dev.new()
par(mfrow = c(3, 2), mgp = c(2, 0.5, 0), oma = c(3.5, 3.5, 2, 2), mar = c(2, 2, 2, 2))
for (i in 1:6) {
  plot(t, N_estimate[i,seq(lw, up, th)],type="l", xaxt = 'n', yaxt = 'n', ann = FALSE)
  mtext(years[i], side = 3, line = 0.5, adj = 0, cex = 1.0) 
}

mtext("Iteration", side = 1, line = 0.5, outer = TRUE, cex = 1.5, font = 2)
mtext("Population Size", side = 2, line = 0.5, outer = TRUE, cex = 1.5, font = 2)


dev.new()
par(mfrow=c(3, 2), mgp=c(2, 0.5, 0), oma = c(3.5, 3.5, 2, 2), mar = c(2, 2, 2, 2))
for (i in 1:6) {
  plot(t,p1[i,seq(lw,up, th)],xlab="Iteration",ylab=expression(p[1]),type="l", xaxt = 'n', yaxt = 'n', ann = FALSE)
  mtext(years[i], side=3, line=0.5, adj=0, cex=1.0)
}

mtext("Iteration", side = 1, line = 0.5, outer = TRUE, cex = 2, font = 2)
mtext(expression(p[1]), side = 2, line = 0.5, outer = TRUE, cex = 2, font = 2)


dev.new()
par(mfrow=c(3, 2), mgp=c(2, 0.5, 0), oma = c(3.5, 3.5, 2, 2), mar = c(2, 2, 2, 2))
for (i in 1:6) {
  plot(t,p2[i,seq(lw,up, th)],xlab="Iteration",ylab=expression(p[1]),type="l", xaxt = 'n', yaxt = 'n', ann = FALSE)
  mtext(years[i], side=3, line=0.5, adj=0, cex=1.0)
}

mtext("Iteration", side = 1, line = 0.5, outer = TRUE, cex = 2, font = 2)
mtext(expression(p[2]), side = 2, line = 0.5, outer = TRUE, cex = 2, font = 2)


dev.new()
par(mfrow=c(3, 2), mgp=c(2, 0.5, 0), oma = c(3.5, 3.5, 2, 2), mar = c(2, 2, 2, 2))
for (i in 1:6) {
  plot(t,p3[i,seq(lw,up, th)],xlab="Iteration",ylab=expression(p[1]),type="l", xaxt = 'n', yaxt = 'n', ann = FALSE)
  mtext(years[i], side=3, line=0.5, adj=0, cex=1.0)
}

mtext("Iteration", side = 1, line = 0.5, outer = TRUE, cex = 2, font = 2)
mtext(expression(p[3]), side = 2, line = 0.5, outer = TRUE, cex = 2, font = 2)





par(mfrow=c(2,3),mgp=c(0.5, 0, 0), oma = c(3, 1, 1, 1), mar = c(2, 2.5, 1, 0.5))
plot(t,delta[1,seq(lw,up, th)],xlab="",ylab=bquote(bold(delta[1])),type="l", cex.lab = 2, font.lab = 2, xaxt = 'n', yaxt = 'n')
plot(t,delta[2,seq(lw,up, th)],xlab="",ylab=bquote(bold(delta[2])),type="l", cex.lab = 2, font.lab = 2, xaxt = 'n', yaxt = 'n')
plot(t,delta[3,seq(lw,up, th)],xlab="",ylab=bquote(bold(delta[3])),type="l", cex.lab = 2, font.lab = 2, xaxt = 'n', yaxt = 'n')
plot(t,alpha_1[seq(lw,up, th)],xlab="",ylab=bquote(bold(beta[1])),type="l", cex.lab = 2, font.lab = 2, xaxt = 'n', yaxt = 'n')
plot(t,alpha_2[seq(lw,up, th)],xlab="",ylab=bquote(bold(beta[2])),type="l", cex.lab = 2, font.lab = 2, xaxt = 'n', yaxt = 'n')
plot(t,alpha_3[seq(lw,up, th)],xlab="",ylab=bquote(bold(beta[3])),type="l", cex.lab = 2, font.lab = 2, xaxt = 'n', yaxt = 'n')
mtext("Iteration", side = 1, line = 0.5, outer = TRUE, cex = 1.5, font = 2)





##################### Estimates ###############################
num=((up-lw)/th)+1

p_1..=array(NA,c(nrow(data),num))
p_.1.=array(NA,c(nrow(data),num))
p_..1=array(NA,c(nrow(data),num))

est_p_1..=array(NA,nrow(data))
est_p_.1.=array(NA,nrow(data))
est_p_..1=array(NA,nrow(data))


for(i in 1:nrow(data)){
  M=N_estimate[i,seq(lw,up, th)]   # Posterior sample
  Medi[i]=median(M)                  # Posterior median, estimate of N
  MD_Medi[i]=sum(abs(M-Medi[i]))/length(M)
  
  Interval_hpd=hdi(M, credMass=0.95) #  95% highest posterior credible interval
  Interval_quant=quantile(M,  probs = c(2.5,97.5)/100)  #  95% CI based on quantiles of posterior density
  
  CI_hpd_N_1[i]=Interval_hpd[1]  # Lower limit of hpd
  CI_hpd_N_2[i]=Interval_hpd[2]  # Upper limit of hpd
  CI_hpd_N_length=Interval_hpd[2]-Interval_hpd[1]   # Length of hpd CI
  
  p_1..[i,]=p_111[i,seq(lw,up, th)]+p_110[i,seq(lw,up, th)]+p_101[i,seq(lw,up, th)]+p_100[i,seq(lw,up, th)]
  p_.1.[i,]=p_111[i,seq(lw,up, th)]+p_110[i,seq(lw,up, th)]+p_011[i,seq(lw,up, th)]+p_010[i,seq(lw,up, th)]
  p_..1[i,]=p_111[i,seq(lw,up, th)]+p_101[i,seq(lw,up, th)]+p_011[i,seq(lw,up, th)]+p_001[i,seq(lw,up, th)]
  
  
  est_p_1..[i]=median(p_1..[i])
  est_p_.1.[i]=median(p_.1.[i])
  est_p_..1[i]=median(p_..1[i])
  
  
}




delta1_estimate=median(delta[1,seq(lw,up, th)])
delta2_estimate=median(delta[2,seq(lw,up, th)])
delta3_estimate=median(delta[3,seq(lw,up, th)])

alpha_1_estimate=median(alpha_1[seq(lw,up, th)])
alpha_2_estimate=median(alpha_2[seq(lw,up, th)])
alpha_3_estimate=median(alpha_3[seq(lw,up, th)])
alpha_estimate=alpha_1_estimate+alpha_2_estimate+alpha_3_estimate



######################################################################################



###### Results ###################

N_hat_TBMH=Medi                               # Median Estimate of the population size 
MD_Median=MD_Medi                                       # Mean deviation about median

hpd_lower_TBMH=CI_hpd_N_1   # Lower limit of the 95% confidence interval based on hpd
hpd_upper_TBMH=CI_hpd_N_2   # Upper limit of the 95% confidence interval based on hpd




##############################################################################





N_hat_TBMH                  
MD_Median


hpd_lower_TBMH   # Lower limit of the 95% confidence interval based on hpd
hpd_upper_TBMH   # Upper limit of the 95% confidence interval based on hpd


alpha_1_estimate
alpha_2_estimate
alpha_3_estimate

alpha_estimate

delta1_estimate
delta2_estimate
delta3_estimate

est_p_1..
est_p_.1.
est_p_..1


